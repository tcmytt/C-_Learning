ASP.NET Core là một Framework nguồn mở, đa nền tảng xây dựng trên .NET Core dành cho việc xây dựng các ứng dụng dựa trên kết nối internet

1. Tạo ứng dụng ASP.NET Core 3.X
dotnet new web
Sau đó mở thư mục dự án bằng Visual Studio Code. 
Lần đầu mở dự án, chọn menu View > Command Palette ... , gõ .NET build rồi chọn mục .NET: Generate Assets for Build and Debug. 

dotnet build 
Kết quả build được lưu tại /bin/Debug/netcoreapp3.0/
Để build và chạy ứng dụng luôn gõ :
dotnet run


2. Tạo middleWare
Việc thêm Middleware vào pipeline được thực hiện ở phương thức Configure của lớp Startup
nhận đầu vào là tham số kiểu HttpContext (có chứa HttpRequest và HttpRespone), thi hành code, sau đó chuyển đến cho middleware tiếp theo.

- Đăng ký middleWare file Startup.cs :
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        { 
            app.UseStaticFiles();
            app.UseSession();
            app.UseRouting();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapMethods("/Testpost" , new string[] {"post", "put"}, async context => {
                    await context.Response.WriteAsync("post/pust");
                });
                endpoints.MapGet("/Home", async context => {
                    int? count  = context.Session.GetInt32("count");
                    count = (count != null) ? count + 1 : 1;
                    context.Session.SetInt32("count", count.Value);
                    await context.Response.WriteAsync($"Home page! {count}");
                });
            });
            app.Run(async context  => {
                context.Response.StatusCode = StatusCodes.Status404NotFound;
                await context.Response.WriteAsync("Page not found");
            });
        }

- Tạo Middleware riêng trong ASP.NET Core :
public class CheckAcessMiddleware {
    // Lưu middlewware tiếp theo trong Pipeline
    private readonly RequestDelegate _next;
    public CheckAcessMiddleware (RequestDelegate next) => _next = next;

    public async Task Invoke (HttpContext httpContext) {
      if (httpContext.Request.Path == "/testxxx") {

        Console.WriteLine ("CheckAcessMiddleware: Cấm truy cập");
        await Task.Run (
          async () => {
            string html = "<h1>CAM KHONG DUOC TRUY CAP</h1>";
            httpContext.Response.StatusCode = StatusCodes.Status403Forbidden;
            await httpContext.Response.WriteAsync (html);
          }
        );

      } else {

        // Thiết lập Header cho HttpResponse
        httpContext.Response.Headers.Add ("throughCheckAcessMiddleware", new [] { DateTime.Now.ToString () });

        Console.WriteLine ("CheckAcessMiddleware: Cho truy cập");

        // Chuyển Middleware tiếp theo trong pipeline
        await _next (httpContext);

      }

    }
  }

- Đưa Middleware vào pipeline sử dụng phương thức UseMiddleware của IApplicationBuilder
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    / ..
    app.UseStaticFiles();
    app.UseSession();
    // Đưa Middleware vào pipeline - vị trí thứ 3
    app.UseMiddleware<CheckAcessMiddleware>();
    /..
}

- Xây dựng Middleware triển khai từ giao diện IMiddleware :
public class FrontMiddleware : IMiddleware
  {
    public async Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        Console.Clear();
        Console.WriteLine("FrontMiddleware: " + context.Request.Path);
        await next(context);
    }
  }

Startup.cs
public void ConfigureServices(IServiceCollection services)
{
    services.AddTransient<FrontMiddleware>();
    //.. các đăg ký khác
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    app.UseMiddleware<FrontMiddleware>();
    // ... các Middleware khác
}

- Truyền dữ liệu giữa các Middleware :
Lưu dữ liệu:
context.Items.Add("dulieu1", "Data Object ...");

Đọc dữ liệu:
var data  = context.Items["dulieu1"];

3. Đọc và ghi Request và Response - xử lý truy vấn cơ bản upload file cookie - json
- Sử dụng Webpack để build js scss :
npm init -y                                         # tạo file package.json cho dự án
npm i -D webpack webpack-cli                        # cài đặt Webpack
npm i node-sass postcss-loader postcss-preset-env   # cài đặt các gói để làm việc với SCSS
npm i sass-loader css-loader cssnano                # cài đặt các gói để làm việc với SCSS, CSS
npm i mini-css-extract-plugin cross-env file-loader # cài đặt các gói để làm việc với SCSS
npm install copy-webpack-plugin                     # cài đặt plugin copy file cho Webpack
npm install npm-watch                               # package giám sát file  thay đổi
npm install bootstrap                               # cài đặt thư viện bootstrap
npm install jquery                                  # cài đặt Jquery
npm install popper.js                               # thư viện cần cho bootstrap

Sau các lệnh này các package trên được tải về lưu tại node_modules, giờ đến bước cấu hình Webpack để khi chạy nó có được mục đích sau:
Copy jquery.min.js từ package jquery ra thư mục wwwroot/js
Copy popper.min.js từ package popper.js ra thư mục wwwroot/js
Copy bootstrap.min.js từ package bootstrap ra thư mục wwwroot/js
Biên dịch file src/scss/site.scss thành file wwww/css/site.min.css (đã gộp cả CSS của Bootstrap)

Bc1: soạn file nguồn src/scss/site.scss có nội dung cơ bản như sau:
//Gộp Bootstrap
// Có thể thiết lập các biến biến như màu $warning ...
@import '../../node_modules/bootstrap/scss/bootstrap.scss';
Bc2 : Cấu hình lại file :
webpack.config.js : https://gist.github.com/xuanthulabnet/ce1f473658567c09f277362694c90157
package.json : https://raw.githubusercontent.com/xuanthulabnet/learn-cs-netcore/master/ASP_NET_CORE/03.RequestResponse/package.json
BC3 : Chạy webpack
npm run build
npm run watch

- Rẽ nhánh pipeline xử lý yêu cầu truy vấn  : IApplicationBuilder.Run 
+ Tạo điểm cuối nhánh:
public void Configure (IApplicationBuilder app, IWebHostEnvironment env) {
        /.. các cấu hình khác
        // Thường là trường hợp yêu cầu truy vấn không đúng địa chỉ (not found)s
        app.Run (async (HttpContext context) => {
            context.Response.StatusCode = StatusCodes.Status404NotFound;
            await context.Response.WriteAsync ("Nội dung");
        });
}

+ Rẽ nhánh pipeline bởi EndpointMiddleware :
app.UseRouting();

Cách 2 : Tương tự
app.Map(pathMatch, (IApplicationBuilder app) => {

    // Sử dụng app để xử lý yêu cầu, ví dụ tạo endpoint
    app.Run(async context => {

        await context.Response.WriteAsync ("Xin chào! (app.Map)");

    });
});

Cách 1 :
app.UseEndpoints ((IEndpointRouteBuilder  endpoints) => {

    // Tại đây là code, sử dụng endpoints (IEndpointRouteBuilder) tạo các điểm cuối
    // Hình thành lên các nhánh rẽ ra từ EndpointRoutingMiddleware

});

IEndpointRouteBuilder có nhiều phương thức để tạo ra điều hướng một vài trong số đó là:

Map(pattern, requestDelegate) : pattern là chuỗi với Url gửi đến, requestDelegate là RequestDelegate thi hành. 
Ví dụy tạo RouteEndpoint phù hợp khi truy vấn đến địa chỉ /Abc
endpoints.Map("/Abc", async httpcontext => {
    await httpcontext.Response.WriteAsync ("Truy cập /Abc");
});
Chuỗi /Abc định nghĩa là khi Url truy cập phù hợp với nó (bằng nó), tuy nhiên nó được định nghĩa còn phức tạp hơn gọi là các mẫu định tuyển (route template).
endpoints.Map("/product/{productid:int}", async httpcontext => {

    // Đọc giá trị productid gửi đến
    var idproduct = httpcontext.Request.RouteValues["productid"];

    // Đọc giá trị Query
    var numberorder = httpcontext.Request.Query["order"];

     await httpcontext.Response.WriteAsync ($"Sản phẩm {idproduct}, order = {numberorder}");
});
Với định nghĩa trên thì các url truy cập tới có dạng /product/123, /product/567?order=10 ... là phù hợp với RouteEndpoint này.
Xem thêm : https://learn.microsoft.com/en-us/aspnet/core/fundamentals/routing?view=aspnetcore-3.1#route-constraint-reference

Các phương thức MapGet(pattern, requestDelegate), MapDelete(pattern, requestDelegate), MapPost(pattern, requestDelegate), MapPut(pattern, requestDelegate) có cách sử dụng tương tự Map, 
chỉ có điều khác là nó phù hợp với phương thức truy vấn đến cụ thể get, delete, post, put
MapMethods(pattern, httpMethods, requestDelegate) dùng khi muốn chỉ định chấp nhận các phương thức cụ thể khai báo trong danh sách httpMethods. 
Ví dụ, chấp nhận yêu cầu có phương thức put, delete, post:
endpoints.MapMethods("/cart", new string[] {"put", "post", "delete"},
async context => {

    var method = context.Request.Method;

    await context.Response.WriteAsync ("Method: {method}");

});

- Ví dụ Ứng dụng Route, tìm hiều Request, Response, Upload File, Cookies, Json :
app.UseRouting();
app.UseEndpoints(endpoints => {

    endpoints.MapGet("/", async context =>
    {
        await  context.Response.WriteAsync("Trang chủ");
    });

    endpoints.Map("/RequestInfo", async context => {
        // xây dựng chức năng /RequestInfo ở đây
        await context.Response.WriteAsync("/RequestInfo");
    });
});

app.Map("/Json", app => {
    app.Run(async context => {
        // code ở đây
        await context.Response.WriteAsync("/Json");
    });
});

- Xây dựng lớp tiện ích HtmlHelper 
- Đọc thông tin HttpRequest cơ bản

4.Đăng ký dịch vụ vào IServiceCollection và Inject các dịch vụ C# CSharp
https://xuanthulab.net/asp-net-core-dang-ky-dich-vu-vao-iservicecollection-va-inject-cac-dich-vu-c-csharp.html
Định nghĩa interface có tên IListProductName, có phương thức để lấy danh sách chuỗi - tên các sản phẩm.
Triển khai giao diện IListProductName với hai lớp dịch vụ gồm LaptopName và PhoneName

Ứng dụng ASP.NET Core cung cấp sẵn một DI Container có kiểu IServiceCollection, đối tượng này để đăng ký các dịch vụ vào ứng dụng. 
Các đăng ký sẽ thực hiện ở phương thức ConfigureServices của lớp Startup
Đăng ký dịch vụ như sau:
public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton<IListProductName, PhoneName>();          //  đăng ký dịch vụ, đối tượng chỉ tạo một lần
    services.AddTransient<LaptopName, LaptopName>();               //  đăng ký dịch vụ, tạo mới  mỗi lần  triệu gọi
    services.AddTransient<ProductController, ProductController>();
}
Để triệu gọi ra các dịch vụ này trực tiếp thì sử dụng đối tượng kiểu IApplicationBuilder có trong phương thức Configure của lớp Startup, ví dụ:
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    /..
    var myservice = app.ApplicationServices.GetService<IListProductName>();
    /..
}
Hoặc có thể lấy thông qua HttpContext
var myservice = context.RequestServices.GetService<IListProductName>();

- Map, MapWhen và sử dụng dịch vụ :
Ví dụ, tạo ra điểm rẽ nhánh trên pipeline khi truy vấn với Url là /Product
app.Map("/Product", app => {
    app.Run(async (context) => {
        // Gọi đến dịch vụ ProductController
        var productcontroller = app.ApplicationServices.GetService<ProductController>();
        await productcontroller.List(context);
    });
});

MapWhen : điểm khác là không trực tiếp tạo mẫu route để so sánh với Url gửi đến rồi rẽ nhánh mà MapWhen lại thực hiện với một điều kiện logic bất kỳ nào đó. 
MapWhen(Func<HttpContext, bool> predicate, Action<IApplicationBuilder> configuration); 
Nếu predicate trả về true thì thực hiện configuration
Ví dụ, thực hiện điều hướng Request - nếu url truy vấn (path) bắt đầu bởi Abcxyz :
app.MapWhen(
    (context)  =>  {
        return context.Request.Path.Value.StartsWith("/Abcxyz");
    },

    appProduct => {
        appProduct.Run(async (context) => {
            await appProduct.ApplicationServices.GetService<ProductController>().List(context);
        });
});

- Kiểm tra các dịch vụ đã đăng ký 

5. Sử dụng Session trong ứng dụng Web C# CSharp
Để ứng dụng sử dụng Session thêm vào dự án Package như sau:
dotnet add package Microsoft.AspNetCore.Session
dotnet add package Microsoft.Extensions.Caching.Memory

Kích hoạt Session trong ASP.NET :
Mở lớp Startup thêm vào phương thức ConfigureServices và Configure code sau:

public void ConfigureServices(IServiceCollection services)
{
    /..
    services.AddDistributedMemoryCache();           // Đăng ký dịch vụ lưu cache trong bộ nhớ (Session sẽ sử dụng nó)
    services.AddSession(cfg => {                    // Đăng ký dịch vụ Session
        cfg.Cookie.Name = "xuanthulab";             // Đặt tên Session - tên này sử dụng ở Browser (Cookie)
        cfg.IdleTimeout = new TimeSpan(0,60, 0);    // Thời gian tồn tại của Session
        });
    /..
}

public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    /..
    app.UseSession();                               // Đăng ký Middleware Session vào Pipeline
    /..
}

Bằng cách đăng ký như vậy, ứng dụng sẽ có một đối tượng kiểu ISession để làm việc với Session. Đối tượng này lấy được từ thuộc tính của HttpContext
// Lấy ISession - context là đối tượng kiểu HttpContext do ứng dụng cung cấp
var session = context.Session;

- Giao diện ISession triển khai trong ứng dụng ASP.NET mà ta lấy được ở trên là lớp DistributedSession, sau đây là một số phương thức, thuộc tính của nó
ID	Thuộc tính lấy ID của Session, ID này có gửi về lưu ở Cookie
Clear()	Xóa bỏ các giá trị lưu trong Session
Set(String key, Byte[])	Lưu mảng byte vào Session với key chỉ ra
TryGetValue(String key, Byte[])	Lấy dữ liệu lưu trong key (trả về false là có thành công)
SetString(String key, String s)	Lưu chuỗi vào key
GetString(String key)	Lấy chuỗi lưu trong key
SetInt32(String key, Int32 val)	Lưu số kiểu int32 vào key
GetInt32(String key)	Lấy số int32 trong key

6. Cấu hình ứng dụng WEB appsettings.json và Inject option cho các dịch vụ C# CSharp
File cấu hình appsettings.json và đọc config với IConfiguration
File config trên là tự động nạp vào ứng dụng, lưu trong đối tượng dịch vụ với tên IConfiguration. Sử dụng đối tượng này để đọc config. 

IConfiguration configuration = appOptions.ApplicationServices.GetService<IConfiguration>();

- Lấy section config như là đối tượng :
IConfiguration.Get<ClassName>()

7. Gửi Mail trong ứng dụng Web Asp.net
Thư viện .NET cung cấp lớp SmtpClient cho phép bạn gửi Email thông qua giao thức SMTP (Simple Mail Transfer Protocol)
using System;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;

namespace MailUtils {
    public static class MailUtils {

    /// <summary>
    /// Gửi Email
    /// </summary>
    /// <param name="_from">Địa chỉ email gửi</param>
    /// <param name="_to">Địa chỉ email nhận</param>
    /// <param name="_subject">Chủ đề của email</param>
    /// <param name="_body">Nội dung (hỗ trợ HTML) của email</param>
    /// <param name="client">SmtpClient - kết nối smtp để chuyển thư</param>
    /// <returns>Task</returns>
    public static async Task<bool> SendMail(string _from, string _to, string _subject, string _body, SmtpClient client) {
            // Tạo nội dung Email
            MailMessage message = new MailMessage (
                from: _from,
                to: _to,
                subject: _subject,
                body: _body
            );
            message.BodyEncoding = System.Text.Encoding.UTF8;
            message.SubjectEncoding = System.Text.Encoding.UTF8;
            message.IsBodyHtml = true;
            message.ReplyToList.Add (new MailAddress (_from));
            message.Sender = new MailAddress (_from);


            try {
                await client.SendMailAsync (message);
                return true;
            } catch (Exception ex) {
                Console.WriteLine (ex.Message);
                return false;
            }
        }

    }
}

await MailUtils.SendMail(_from, _to, _subject, _body, client);
await MailUtils.SendMail("myemail@domain.com", "yourmail@domain.com","Gửi mail", "Nội dung Email", client);
Chú ý lời gọi SendMail trên là bất đồng bộ, nếu code gọi đồng bộ thì: MailUtils.SendMail(..).Wait();

- Gửi Mail với Smtp Server Localhost cần Server Smtp cài đặt cùng host của ứng dụng
- Gửi Mail bằng cách sử dụng Gmail :

8. Sử dụng gulp.js build SCSS (SASS) thành CSS
gulp.js là một Task runner, giúp thi hành các tác vụ, để sử dụng gulp.js cần đảm bảo hệ thống có cài node.js

9.  Sử dụng công cụ LibMan lấy thư viện client-side
LibMan (Library Manager) là công cụ giúp lấy về các thư viện client-side (JS, CSS, Image) về dự án, bạn có thể nhanh chóng lấy về các thư viện phổ biến từ các CDN (content delivery network) như CDNJS, jsDelivr, unpkg. 
libman giống npm

Cài đặt LibMan
dotnet tool install -g Microsoft.Web.LibraryManager.Cli

Kiểm tra bằng lệnh
libman --version

Quản lý bằng LibMan được khai báo trong một file json có tên libman.json
libman init

libman install twitter-bootstrap

Tải tất cả các thư viện khai báo trong libman.json
libman restore

Cập nhập
libman update jquery